// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows(id, name, url, user_id, feed_id)
    VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
    RETURNING id, name, url, user_id, feed_id
)
SELECT inserted_feed_follow.id, inserted_feed_follow.name, inserted_feed_follow.url, inserted_feed_follow.user_id, inserted_feed_follow.feed_id,
feed.name AS feed_name,
users.name AS user_name
FROM inserted_feed_follow
INNER JOIN feed ON inserted_feed_follow.feed_id = feed.id
INNER JOIN users ON inserted_feed_follow.user_id = users.id
`

type CreateFeedFollowParams struct {
	ID     uuid.UUID
	Name   string
	Url    string
	UserID uuid.UUID
	FeedID uuid.UUID
}

type CreateFeedFollowRow struct {
	ID       uuid.UUID
	Name     string
	Url      string
	UserID   uuid.UUID
	FeedID   uuid.UUID
	FeedName string
	UserName string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
		&i.FeedID,
		&i.FeedName,
		&i.UserName,
	)
	return i, err
}
